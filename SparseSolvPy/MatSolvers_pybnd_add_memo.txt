
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/numpy.h>
#include <pybind11/complex.h>
namespace py = pybind11;

	/*--------------------------------------------------*/
	/*--------------------------------------------------*/
	std::vector<double> getResidualLog_py();
	bool solveICCG_py(const slv_int size0, const double conv_cri, const int max_ite, const double accera, const SparseMat& matA, py::array_t<double> vecB, py::array_t<double> results, bool init=false);
	bool solveICCG_py(slv_int size0, const double conv_cri, const int max_ite, const double accera, const SparseMatC& matA, py::array_t<std::complex<double>> vecB, py::array_t<std::complex<double>> results, bool init=false);
	bool solveICCGwithABMC_py(const slv_int size0, const double conv_cri,  const int max_ite, const double accera, const SparseMat &matA, 
						   py::array_t<double> vec_b, py::array_t<double> results, int num_blocks, int num_colors, bool init=false);
	bool solveICMRTR_py(const slv_int size0, const double conv_cri, const int max_ite, const double accera, const SparseMat& matA, py::array_t<double> vecB, py::array_t<double> results, bool init=false);
	bool solveICMRTR_py(const slv_int size0, const double conv_cri, const int max_ite, const double accera, const SparseMatC& matA, py::array_t<std::complex<double>> vecB, py::array_t<std::complex<double>> results, bool init=false);
	bool solveSGSMRTR_py(const slv_int size0, const double conv_cri, const int max_ite, const SparseMat& matA,  py::array_t<double> vecB, py::array_t<double> results, bool init=false);	
	bool solveSGSMRTR_py(const slv_int size0, const double conv_cri, const int max_ite, const SparseMatC& matA, py::array_t<std::complex<double>> vecB, py::array_t<std::complex<double>> results, bool init=false);

